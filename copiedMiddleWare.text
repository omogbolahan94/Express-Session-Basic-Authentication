function auth(req, res, next) {
    console.log(req.headers);

    var authHeader = req.headers.authorization; //get the authorization that encodes the user name ad password into a string of base 16 

    if(!authHeader) { //if auth header is null, it means authentication header does not exist(i.e client does not include user name and password)
        var err = new Error('You are not authorized!') ;

        res.setHeader('WWW-Authenticate', 'Basic'); //where WWW-Authenticate is the header key, header value isBasic
        err.status = 401; //unauthorise code
        next(err); //go to the error handler to construct the reply message
        return;
    }

    //authHeader = Authorization: Basic encoded-string-in-Base64
    //authHeader.split(' ') = ['Basic', encoded-string-in-Base64]
    //authHeader.split(' ')[1].toString() = "userName:password"
    var auth = new Buffer.from(authHeader.split(' ')[1], 'base64').toString().split(':'); //[userName, Password]
    var user = auth[0];
    var pass = auth[1];

    if(user === 'admin' && pass === 'password') { //default username and password
        next(); //authorise user and go to the next middleware
    } else {
          var err = new Error('You are not authorized!');

          res.setHeader('WWW-Authenticate', 'Basic');
          err.status = 401; 
          return next(err);
    }
}


***USING COOKIE***
*** var cookieParser = require('cookie-parser'); 
*** app.use(cookieParser('12345-67890-09876-54321')); //using the signed cookie middleware
CHANGE THE AUTHORIZATION MIDDLEWARE ABOVE TO MAKE USE OF COOKIE INSTEAD OF AUTHORIZATION HEADER
/****
    cookie is used for tracking authenticated users so that subsequent access to the server
    can be enabled without need for authentication

    check the auth middleware in app.js for the code snippet

function auth(req, res, next) {
    console.log(req.signedCookies);

    //if cookie does not exist, we will set up a cookie
    if(!req.signedCookies.user) {//where user is a field that should have the name of the cookie as its value
      var authHeader = req.headers.authorization; //get the authorization that encodes the user name ad password into a string of base 16 

      if(!authHeader) { //if auth header is null, it means authentication header does not exist(i.e client does not include user name and password)
          var err = new Error('You are not authorized!') ;

          res.setHeader('WWW-Authenticate', 'Basic'); //where WWW-Authenticate is the header key, header value isBasic
          err.status = 401; //unauthorise code
          next(err); //go to the error handler to construct the reply message
          return;
      }

      //authHeader = Authorization: Basic encoded-string-in-Base64
      //authHeader.split(' ') = ['Basic', encoded-string-in-Base64]
      //authHeader.split(' ')[1].toString() = "userName:password"
      var auth = new Buffer.from(authHeader.split(' ')[1], 'base64').toString().split(':'); //[userName, Password]
      var user = auth[0];
      var pass = auth[1];

      if(user === 'admin' && pass === 'password') { //default username and password
          res.cookie('user', 'admin', {signed: true}) //setting up cookie for the 'user' field with value 'admin'
          next(); //authorise user and go to the next middleware
      } else {
            var err = new Error('You are not authorized!');

            res.setHeader('WWW-Authenticate', 'Basic');
            err.status = 401; 
            return next(err);
      }
    }
    else { //if cookie does exist for the user already. user can be granted an access even if they clear their authorization because the server has set up a cookie on them already
        if (req.signedCookies.user === 'admin') {
            next();
        } 
        else { //
            var err = new Error('You are not authorized!');

            res.setHeader('WWW-Authenticate', 'Basic');
            err.status = 401; 
            return next(err);
        }      
    }
}
****/(end of cookie parser)

//*USING EXPRESS-SESSION AND FILE-STORE(TO STORE INFORMATION PERMANENTLY IN THE EXPRESS-SESSION )
//By default, informations are stored in the memory which will be erased when the server is reloaded
//file-store helps us to store information PERMANENTLY

/*AUTH MIDDLEWERE BEFORE USING USING THE LOGIN METHOD IN USERS.JS*/
function auth(req, res, next) {
    console.log(req.session); //the session property is now part of req object

    //if session with field property user does not exist yet
    if(!req.session.user) {
      var authHeader = req.headers.authorization; //get the authorization that encodes the user name and password into a string of base 16 

      if(!authHeader) { //if auth header is null, it means authentication header does not exist(i.e client does not include user name and password)
          var err = new Error('You are not authorized!') ;

          res.setHeader('WWW-Authenticate', 'Basic'); //where WWW-Authenticate is the header key, header value isBasic
          err.status = 401; //unauthorise code
          next(err); //go to the error handler to construct the reply message
          return;
      }

      //authHeader = Authorization: Basic encoded-string-in-Base64
      //authHeader.split(' ') = ['Basic', encoded-string-in-Base64]
      //authHeader.split(' ')[1].toString() = "userName:password"
      var auth = new Buffer.from(authHeader.split(' ')[1], 'base64').toString().split(':'); //[userName, Password    
      var username = auth[0];
      var password = auth[1];

      if(username === 'admin' && password === 'password') { //default username and password
          req.session.user = 'admin'; //setting up session user property to 'admin'
          next(); //authorise user and go to the next middleware
      } else {
            var err = new Error('You are not authorized!');

            res.setHeader('WWW-Authenticate', 'Basic');
            err.status = 401; 
            next(err);
      }
    }
    else { //if does exist for the user already. user can be granted an access even if they clear their authorization because the server has set up a cookie on them already
        if (req.session.user === 'admin') {
            next();
        } 
        else { //
            var err = new Error('You are not authorized!');

            res.setHeader('WWW-Authenticate', 'Basic');
            err.status = 401; 
            next(err);
        }      
    }
}











